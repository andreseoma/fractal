from tkinter import *
from tkinter import ttk
from math import copysign, floor, fmod
from time import time
from numba import jit
import multiprocessing as mp
from PIL import Image, ImageTk
import numpy
import gmpy2
from gmpy2 import mpfr, mpc
#kasutab lisaks mooduleid gmpy2, numpy, numba ja Pillow, mis tuleb t천mmata internetist


#@jit(nopython=True)    #double puhul on jit k천vasti kiirem, gmpy suurema t채psuse puhul mitte
def image(img,minx,miny,d,px,n):
    step=d/px
    for y in range(px):
        for x in range(px):
            c=minx+x*step+1j*(miny+d-y*step)
            z=c
            col=n
            for i in range(n):
                z=z*z+c
                if z.real*z.real+z.imag*z.imag > 4:
                    col=i
                    break
            img[y,x]=255-255*col//n

def hit3(event):
    global start3
    start3=(event.x, event.y)

def drag3(event):
    global start3, x, y, dpx
    dpx=max(abs(start3[0]-event.x),abs(start3[1]-event.y))
    x=start3[0]+copysign(dpx, event.x-start3[0])
    y=start3[1]+copysign(dpx, event.y-start3[1])
    canv.coords(rect,start3[0],start3[1],x,y)
    canv.itemconfig(rect,state='normal')

def drop3(event):
    global start3, x, y, d, dpx, minx, miny, dx, dy
    canv.itemconfig(rect,state='hidden')
    if start3[0]==event.x or start3[1]==event.y:
        return
    x0,y0 = min(start3[0],x)+dx, size-max(start3[1],y)+dy
    minx, miny = minx+d*x0/size, miny+ d*y0/size
    d=d*dpx/size
    print(minx,miny,d)
    reset()

def hit1(event):
    global start1, dx, dy, nodrag
    nodrag=False
    #print(dx, dy)
    start1=(event.x, event.y)

def drag1(event):
    global dx, dy
    update(dx+start1[0]-event.x,dy+event.y-start1[1])

def drop1(event):
    global dx, dy, nodrag
    nodrag=True
    dx = dx+start1[0]-event.x
    dy = dy+event.y-start1[1]
    #print(dx,dy)

def scroll(event):
    global d,minx,miny
    if event.delta<0:
        minx,miny=minx+dx/size*d-d/2,miny+dy/size*d-d/2
        d=2*d
        reset()

def worker(jobs,done):
    gmpy2.get_context().precision=100
    while 1:
        job=jobs.get()
        tim=time()
        img=numpy.zeros((job[3],job[3]),dtype=numpy.uint8)
        done.put(job)
        image(img,job[0],job[1],job[2],job[3],job[5])
        done.put([img,job[0],job[1],job[4],time()-tim])

def reset():
    global grid, dx, dy, curi, curj,nodrag
    nodrag=True
    curi,curj=0,0
    dx, dy = 0, 0
    grid=[(i,j) for i in range(2) for j in range(2)]
    grid+=[(i,j) for j in range(-1,3) for i in (-1,2)]
    grid+=[(i,j) for i in (0,1) for j in (-1,2)]
    #print(grid)
    work=map(jobforgrid,grid)
    while not jobs.empty():
        try: jobs.get_nowait()
        except: pass
    while not done.empty():
        try: done.get_nowait()
        except: pass
    for el in work: jobs.put(el)

def jobforgrid(coords):
    i,j=coords[0],coords[1]
    return [minx+i*d/2,miny+j*d/2,d/2,size//2,(i,j),n]

def addjobs():
    global grid, curi, curj
    for i in range(-1,3):
        for j in range(-1,3):
            if (curi+i,curj+j) not in grid:
                grid+=[(curi+i,curj+j)]
                #print((curi+i,curj+j))
                #print(grid)
                jobs.put(jobforgrid((curi+i,curj+j)))

def update(dx,dy):
    global curi, curj
    i = floor(dx/(size/2))
    j = floor(dy/(size/2))
    if curi!=i or curj!=j:
        curi,curj=i,j
        addjobs()
    offsetx=dx%(size//2)
    offsety=dy%(size//2)
    #print(i,j,dx,dy,offsetx,offsety)
    for m in range(4):
        for n in range(4):
            #try:
            bigim.paste(griddata.get((i-1+m,j-1+n),zeroimg),(m*size//2,2*size-(1+n)*size//2))
            #except: pass
    #bigim.show()
    #im.paste(bigim,(size//2+offsetx,size-offsety,size+size//2+offsetx,2*size-offsety))
    im.paste(bigim,(-size//2-offsetx,-size//2+offsety))
    img.paste(im)
    
def listener():
    global minx, miny, d, dx, dy, curi, curj
    try:
        job=done.get_nowait()
        griddata[job[3]]=Image.fromarray(job[0],mode='L')
        #print(griddata.keys())
        print(job[4])
        #griddata[job[3]].show()
        #print(job[1],job[2],job[3])
        if (0 <= job[3][0]-curi <= 2 or 0 <= job[3][1]-curj <= 2) and nodrag:
            update(dx,dy)
    except: pass
    root.after(20,listener)

if __name__=='__main__':
    gmpy2.get_context().precision=100 #komakohtade arv
    size=100
    n=1000
    jobs=mp.Queue()
    done=mp.Queue()
    griddata={}
    grid=[]
    zeroimg=Image.new('L',(size//2,size//2))
    minx = mpfr('-1.00123030778759')
    miny = mpfr('0.3042289471817414')
    d=mpfr('1.6233692104896599e-15')
    #minx = -2 #ilma arbitrary precisionita versioon, k천vasti kiirem
    #miny = -2
    #d = 4
    reset()
    procs = [mp.Process(target=worker,args=(jobs,done),daemon=True) for i in range(4)]
    for proc in procs: proc.start()
    root = Tk()
    canv = Canvas(root,width=size,height=size)
    canv.pack()
    bigim=Image.new('L',(size*2,size*2))
    im=Image.new('L',(size,size))
    img=ImageTk.PhotoImage('L',(size,size))
    imag=canv.create_image(0,0,image=img,anchor='nw')
    rect=canv.create_rectangle(50,50,200,200,state='hidden')
    canv.bind('<Button-3>', hit3)
    canv.bind('<B3-Motion>', drag3)
    canv.bind('<ButtonRelease-3>',drop3)
    canv.bind('<Button-1>', hit1)
    canv.bind('<B1-Motion>', drag1)
    canv.bind('<ButtonRelease-1>',drop1)
    canv.bind('<MouseWheel>', scroll)
    root.after(0,listener)
    root.mainloop()
    for proc in procs: proc.terminate()
